/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "query GetCardCounts {\n  holidays {\n    name\n    nodeId\n  }\n  continents {\n    name\n    nodeId\n  }\n  countries {\n    name\n    nodeId\n  }\n  cities {\n    name\n    nodeId\n    capital\n    linkedHolidays {\n      nodeId\n    }\n  }\n  towns {\n    name\n    nodeId\n  }\n  islands {\n    name\n    nodeId\n  }\n  people {\n    name\n    nodeId\n    attendedHolidays {\n      nodeId\n    }\n  }\n}\n\nquery GetContinents {\n  continents {\n    name\n    nodeId\n  }\n}\n\nquery GetContinentById($nodeId: String) {\n  continents(where: {nodeId: $nodeId}) {\n    name\n    nodeId\n  }\n}\n\nquery GetCountries {\n  countries {\n    name\n    nodeId\n  }\n}\n\nquery GetCountryById($nodeId: String) {\n  countries(where: {nodeId: $nodeId}) {\n    name\n    nodeId\n  }\n}\n\nquery GetCities {\n  cities {\n    name\n    nodeId\n    capital\n    linkedHolidays {\n      nodeId\n    }\n  }\n}\n\nquery GetCityById($nodeId: String) {\n  cities(where: {nodeId: $nodeId}) {\n    name\n    nodeId\n    capital\n    linkedHolidays {\n      nodeId\n    }\n  }\n}\n\nquery GetCapitals($capitalCheck: Boolean) {\n  cities(where: {capital: $capitalCheck}) {\n    name\n    nodeId\n    capital\n    linkedHolidays {\n      nodeId\n    }\n  }\n}\n\nquery GetTowns {\n  towns {\n    name\n    nodeId\n    linkedHolidays {\n      nodeId\n    }\n  }\n}\n\nquery GetTownById($nodeId: String) {\n  towns(where: {nodeId: $nodeId}) {\n    name\n    nodeId\n    linkedHolidays {\n      nodeId\n    }\n  }\n}\n\nquery GetIslands {\n  islands {\n    name\n    nodeId\n    linkedHolidays {\n      nodeId\n    }\n  }\n}\n\nquery GetPeople {\n  people {\n    name\n    nodeId\n    aliases\n    attendedHolidays {\n      nodeId\n    }\n  }\n}\n\nquery GetPeopleById($nodeId: String) {\n  people(where: {nodeId: $nodeId}) {\n    name\n    nodeId\n    aliases\n    attendedHolidays {\n      name\n      holidayTitle\n      nodeId\n      sortDateValue\n    }\n  }\n}\n\nquery GetHolidays {\n  holidays {\n    dateYear\n    dateMonth\n    sortDateValue\n    name\n    holidayTitle\n    nodeId\n    locations\n    coverPhoto\n    photoAlbum\n    attendees\n    textHtmlContent\n    departingAirport\n  }\n}\n\nquery GetHolidayById($nodeId: String) {\n  holidays(where: {nodeId: $nodeId}) {\n    dateYear\n    dateMonth\n    sortDateValue\n    name\n    holidayTitle\n    nodeId\n    locations\n    coverPhoto\n    photoAlbum\n    attendees\n    textHtmlContent\n    departingAirport\n  }\n}": types.GetCardCountsDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetCardCounts {\n  holidays {\n    name\n    nodeId\n  }\n  continents {\n    name\n    nodeId\n  }\n  countries {\n    name\n    nodeId\n  }\n  cities {\n    name\n    nodeId\n    capital\n    linkedHolidays {\n      nodeId\n    }\n  }\n  towns {\n    name\n    nodeId\n  }\n  islands {\n    name\n    nodeId\n  }\n  people {\n    name\n    nodeId\n    attendedHolidays {\n      nodeId\n    }\n  }\n}\n\nquery GetContinents {\n  continents {\n    name\n    nodeId\n  }\n}\n\nquery GetContinentById($nodeId: String) {\n  continents(where: {nodeId: $nodeId}) {\n    name\n    nodeId\n  }\n}\n\nquery GetCountries {\n  countries {\n    name\n    nodeId\n  }\n}\n\nquery GetCountryById($nodeId: String) {\n  countries(where: {nodeId: $nodeId}) {\n    name\n    nodeId\n  }\n}\n\nquery GetCities {\n  cities {\n    name\n    nodeId\n    capital\n    linkedHolidays {\n      nodeId\n    }\n  }\n}\n\nquery GetCityById($nodeId: String) {\n  cities(where: {nodeId: $nodeId}) {\n    name\n    nodeId\n    capital\n    linkedHolidays {\n      nodeId\n    }\n  }\n}\n\nquery GetCapitals($capitalCheck: Boolean) {\n  cities(where: {capital: $capitalCheck}) {\n    name\n    nodeId\n    capital\n    linkedHolidays {\n      nodeId\n    }\n  }\n}\n\nquery GetTowns {\n  towns {\n    name\n    nodeId\n    linkedHolidays {\n      nodeId\n    }\n  }\n}\n\nquery GetTownById($nodeId: String) {\n  towns(where: {nodeId: $nodeId}) {\n    name\n    nodeId\n    linkedHolidays {\n      nodeId\n    }\n  }\n}\n\nquery GetIslands {\n  islands {\n    name\n    nodeId\n    linkedHolidays {\n      nodeId\n    }\n  }\n}\n\nquery GetPeople {\n  people {\n    name\n    nodeId\n    aliases\n    attendedHolidays {\n      nodeId\n    }\n  }\n}\n\nquery GetPeopleById($nodeId: String) {\n  people(where: {nodeId: $nodeId}) {\n    name\n    nodeId\n    aliases\n    attendedHolidays {\n      name\n      holidayTitle\n      nodeId\n      sortDateValue\n    }\n  }\n}\n\nquery GetHolidays {\n  holidays {\n    dateYear\n    dateMonth\n    sortDateValue\n    name\n    holidayTitle\n    nodeId\n    locations\n    coverPhoto\n    photoAlbum\n    attendees\n    textHtmlContent\n    departingAirport\n  }\n}\n\nquery GetHolidayById($nodeId: String) {\n  holidays(where: {nodeId: $nodeId}) {\n    dateYear\n    dateMonth\n    sortDateValue\n    name\n    holidayTitle\n    nodeId\n    locations\n    coverPhoto\n    photoAlbum\n    attendees\n    textHtmlContent\n    departingAirport\n  }\n}"): (typeof documents)["query GetCardCounts {\n  holidays {\n    name\n    nodeId\n  }\n  continents {\n    name\n    nodeId\n  }\n  countries {\n    name\n    nodeId\n  }\n  cities {\n    name\n    nodeId\n    capital\n    linkedHolidays {\n      nodeId\n    }\n  }\n  towns {\n    name\n    nodeId\n  }\n  islands {\n    name\n    nodeId\n  }\n  people {\n    name\n    nodeId\n    attendedHolidays {\n      nodeId\n    }\n  }\n}\n\nquery GetContinents {\n  continents {\n    name\n    nodeId\n  }\n}\n\nquery GetContinentById($nodeId: String) {\n  continents(where: {nodeId: $nodeId}) {\n    name\n    nodeId\n  }\n}\n\nquery GetCountries {\n  countries {\n    name\n    nodeId\n  }\n}\n\nquery GetCountryById($nodeId: String) {\n  countries(where: {nodeId: $nodeId}) {\n    name\n    nodeId\n  }\n}\n\nquery GetCities {\n  cities {\n    name\n    nodeId\n    capital\n    linkedHolidays {\n      nodeId\n    }\n  }\n}\n\nquery GetCityById($nodeId: String) {\n  cities(where: {nodeId: $nodeId}) {\n    name\n    nodeId\n    capital\n    linkedHolidays {\n      nodeId\n    }\n  }\n}\n\nquery GetCapitals($capitalCheck: Boolean) {\n  cities(where: {capital: $capitalCheck}) {\n    name\n    nodeId\n    capital\n    linkedHolidays {\n      nodeId\n    }\n  }\n}\n\nquery GetTowns {\n  towns {\n    name\n    nodeId\n    linkedHolidays {\n      nodeId\n    }\n  }\n}\n\nquery GetTownById($nodeId: String) {\n  towns(where: {nodeId: $nodeId}) {\n    name\n    nodeId\n    linkedHolidays {\n      nodeId\n    }\n  }\n}\n\nquery GetIslands {\n  islands {\n    name\n    nodeId\n    linkedHolidays {\n      nodeId\n    }\n  }\n}\n\nquery GetPeople {\n  people {\n    name\n    nodeId\n    aliases\n    attendedHolidays {\n      nodeId\n    }\n  }\n}\n\nquery GetPeopleById($nodeId: String) {\n  people(where: {nodeId: $nodeId}) {\n    name\n    nodeId\n    aliases\n    attendedHolidays {\n      name\n      holidayTitle\n      nodeId\n      sortDateValue\n    }\n  }\n}\n\nquery GetHolidays {\n  holidays {\n    dateYear\n    dateMonth\n    sortDateValue\n    name\n    holidayTitle\n    nodeId\n    locations\n    coverPhoto\n    photoAlbum\n    attendees\n    textHtmlContent\n    departingAirport\n  }\n}\n\nquery GetHolidayById($nodeId: String) {\n  holidays(where: {nodeId: $nodeId}) {\n    dateYear\n    dateMonth\n    sortDateValue\n    name\n    holidayTitle\n    nodeId\n    locations\n    coverPhoto\n    photoAlbum\n    attendees\n    textHtmlContent\n    departingAirport\n  }\n}"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;